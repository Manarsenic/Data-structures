# ðŸ”— Introduction to Pointers in C

In C, every variable has a name, a value, and a specific memory address. A pointer is a variable that stores the address of another variable.  
Pointers are essential in C as they allow us to:
- Access and manipulate memory directly.
- Pass information efficiently between functions.
- Return multiple values from functions.
- Dynamically allocate memory and build complex data structures like linked lists, trees, and graphs.

Using pointers:
- You can access array elements efficiently.
- You can refer to a variableâ€™s value using the dereference (`*`) operator.
- You can refer to a variableâ€™s address using the address-of (`&`) operator.

---

## ðŸ“Œ Basic Pointer Example

```c
#include <stdio.h>

int main() {
    int num, *pnum;

    pnum = &num;

    printf("Enter the number: ");
    scanf("%d", &num);

    printf("The number that was entered is: %d\n", *pnum);
    return 0;
}

If ptr1 and ptr2 are pointers, the following expressions are valid:

int total = 2, num1 = 5, num2 = 8, mul = 9, div = 1;
int *ptr1, *ptr2;

ptr1 = &num1;
ptr2 = &num2;

total = *ptr1 + *ptr2;
mul = *ptr1 * *ptr2;
div = *ptr1 / *ptr2;
*ptr1 = (*ptr1) * (*ptr2) - 10;



Generic Pointers
Generic pointers (void *) are used when the type of data the pointer will point to is unknown or can vary.


#include <stdio.h>

int main() {
    char ch = 'A';
    int val = 99;
    void *gp;

    gp = &val;
    printf("Generic pointer now points to the integer value = %d\n", *(int*)gp);

    gp = &ch;
    printf("Generic pointer now points to the character = %c\n", *(char*)gp);

    return 0;
}
